import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import matplotlib

# ‚úÖ ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
matplotlib.rcParams['font.family'] = 'Tahoma'

# üì• ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Drive (Public CSV link ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö direct .xlsx ‡∏ú‡πà‡∏≤‡∏ô gdown)
import gdown
gdown.download('https://docs.google.com/spreadsheets/d/1jRYXViC1nEIM8gMy0RHy5cufIHRfdnFR/edit?usp=sharing&ouid=110281668206260656081&rtpof=true&sd=true', quiet=False)

# üìÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_excel("driploss-v2.xlsx")
df['driploss'] = df['driploss'].astype(str).str.replace('%', '', regex=False).astype(float) * 100

# üéõÔ∏è UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
st.markdown("<h4 style='font-weight:600;'>üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Drip Loss ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô</h4>", unsafe_allow_html=True)
products = df['‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].unique()
selected_product = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", products)

# ‚úÖ ‡∏™‡πÑ‡∏•‡∏î‡πå‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
room_min, room_max = df['Room Temp (¬∞C)'].min(), df['Room Temp (¬∞C)'].max()
item_min, item_max = df['Item Temp (¬∞C)'].min(), df['Item Temp (¬∞C)'].max()

room_range = st.slider("‡∏ä‡πà‡∏ß‡∏á Room Temp (¬∞C)", float(room_min), float(room_max),
                       (float(room_min), float(room_max)), step=0.1)
item_range = st.slider("‡∏ä‡πà‡∏ß‡∏á Item Temp (¬∞C)", float(item_min), float(item_max),
                       (float(item_min), float(item_max)), step=0.1)

# üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df_filtered = df[
    (df['‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'] == selected_product) &
    (df['Room Temp (¬∞C)'].between(*room_range)) &
    (df['Item Temp (¬∞C)'].between(*item_range)) &
    (df['driploss'].notnull())
].copy()

all_factories = sorted(df_filtered['Factory'].unique())
selected_factories = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á", all_factories, default=all_factories)

df_selected = df_filtered[df_filtered['Factory'].isin(selected_factories)].copy()
if df_selected.empty:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    st.stop()

# ‚ûï ‡∏£‡∏ß‡∏°‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô
df_combined = df_selected.copy()
df_combined['Factory'] = '‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô'
df_all = pd.concat([df_selected, df_combined])

# üì¶ Box Plot
ordered_factories = sorted(df_selected['Factory'].unique()) + ['‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô']
df_all['Factory'] = pd.Categorical(df_all['Factory'], categories=ordered_factories, ordered=True)
df_all.sort_values('Factory', inplace=True)

st.subheader(f"üì¶ % Drip loss - {selected_product}")
fig, ax = plt.subplots(figsize=(14, 7))
df_all.boxplot(column='driploss', by='Factory', ax=ax, patch_artist=True, grid=False)

# üé® ‡∏™‡∏µ box
for i, patch in enumerate(ax.artists):
    factory_name = ordered_factories[i]
    color = '#fce570' if factory_name == '‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô' else '#e0e0e0'
    patch.set_facecolor(color)

# üéØ ‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞
ax.set_yticks(np.round(ax.get_yticks(), 2))
ax.set_yticklabels([f"{y:.2f}" for y in ax.get_yticks()], fontsize=10)
ax.set_xlabel("‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô", fontsize=0)
ax.set_ylabel("Drip Loss (%)", fontsize=13)

ax.axhline(0, color='red', linestyle='--', linewidth=1, label='0%')
ax.axhline(1, color='orange', linestyle='--', linewidth=1, label='1%')
ax.axhline(1.5, color='green', linestyle='--', linewidth=1, label='1.5%')
ax.legend(loc='upper right', fontsize=9)

ax.set_title("")
plt.suptitle("")
ax.set_ylim(bottom=0)

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á tick ‡∏à‡∏£‡∏¥‡∏á
tick_positions = ax.get_xticks()
tick_labels = [label.get_text() for label in ax.get_xticklabels()]
ax.set_xticklabels([""] * len(tick_positions))  # ‡∏ã‡πà‡∏≠‡∏ô label ‡πÄ‡∏î‡∏¥‡∏°

# ‚úÖ ‡∏ß‡∏≤‡∏á label ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ tick position ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö box
y_base = -1.0
spacing = 0.35
for x, label in zip(tick_positions, tick_labels):
    subset = df_all[df_all['Factory'] == label]
    if subset.empty:
        continue
    mean_dl = subset['driploss'].mean()
    mean_room = subset['Room Temp (¬∞C)'].mean()
    mean_item = subset['Item Temp (¬∞C)'].mean()

    ax.text(x, y_base, label, ha='center', fontsize=12, weight='bold', color='navy')
    ax.text(x, y_base - spacing, f"DL: {mean_dl:.2f}%", ha='center', fontsize=10)
    ax.text(x, y_base - 2 * spacing, f"RT: {mean_room:.2f}¬∞C", ha='center', fontsize=9)
    ax.text(x, y_base - 3 * spacing, f"IT: {mean_item:.2f}¬∞C", ha='center', fontsize=9)

# üìä ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
st.pyplot(fig)

# üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á
st.subheader("üìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Drip Loss")
summary = df_all.groupby('Factory').agg(
    N=('driploss', lambda x: x.dropna().shape[0]),
    Mean_DripLoss=('driploss', 'mean'),
    Q1=('driploss', lambda x: x.quantile(0.25)),
    Q3=('driploss', lambda x: x.quantile(0.75)),
    Lower_Whisker=('driploss', lambda x: x.quantile(0.25) - 1.5 * (x.quantile(0.75) - x.quantile(0.25))),
    Upper_Whisker=('driploss', lambda x: x.quantile(0.75) + 1.5 * (x.quantile(0.75) - x.quantile(0.25)))
).round(2)

st.dataframe(summary.reset_index(), use_container_width=True)